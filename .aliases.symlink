# Git
alias vansible='ansible all -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory --private-key=~/.vagrant.d/insecure_private_key -u vagrant'
alias vansible-playbook='ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory --private-key=~/.vagrant.d/insecure_private_key -u vagrant'

alias grmm='git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d'
alias cat="bat --theme='Solarized (light)'"

alias ping='prettyping --nolegend'
alias top="sudo htop"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

alias r="radian"

alias snowsql=/Applications/SnowSQL.app/Contents/MacOS/snowsql

alias sidetone='sox --buffer 128 -v 1 -d -d'
alias ls=eza
alias l="eza -lah"
alias tf="terraform"
alias lc="lumen draft | git commit -F -"

alias brewup="brew update && brew upgrade && brew cleanup && brew autoremove && brew cu"
alias ollup='ollama list | awk '\''NR>1 && !/reviewer/ {print "Pulling model: "$1; system("ollama pull "$1)}'\'


function op2env() {
    input_file="${1:-.env.example}"
    while IFS= read -r line || [[ -n "$line" ]]; do
        key="$(echo "$line" | awk -F "=" '{print $1}')"
        echo "${key}=\${${key}}"
    done < "$input_file" | op run --no-masking --env-file="$input_file" -- envsubst > .env
}

alias tmosh='() {mosh $* -- sh -c "tmux a || tmux"}'
alias zmosh='() {mosh $* -- sh -c "zellij a -c default"}'

ha_notify() {
  curl -X POST \
    -H "Authorization: Bearer $HASS_TOKEN" \
    -H "Content-Type: application/json" \
    -d "{\"message\": \"$1\"}" \
    http://homelab-nuc.lan:8123/api/services/notify/daniel
}

update_secrets() {
    op signin --account my
    op inject -fi ~/.dotfiles/.secrets.sh -o ~/.secrets.sh && cat ~/.secrets.sh
}

update_billie_secrets() {
    op signin --account billie-team
    op inject -fi ~/.dotfiles/.secrets.billie.sh -o ~/.secrets.billie.sh && cat ~/.secrets.billie.sh
}

alias drawthings="gRPCServerCLI-macOS ~/Library/Containers/com.liuliu.draw-things/Data/Documents/Models --name mac --model-browser --no-tls"

alias aider='uv tool run --from aider-chat --python python3.12 aider --watch-files --notifications'
alias aider-google='aider --model gemini'
alias aider-google-free='aider --model gemini-exp'
alias aider-google-flash='aider --model gemini/gemini-2.5-flash-preview-05-20'
alias aider-r1-free='aider --model openrouter/deepseek/deepseek-r1:free'
alias aider-r1='aider --model openrouter/deepseek/deepseek-r1'
alias aider-deepseek-free='aider --architect --model openrouter/deepseek/deepseek-r1:free --editor-model openrouter/deepseek/deepseek-chat-v3-0324:free --weak-model openrouter/deepseek/deepseek-chat-v3-0324:free'
alias aider-mistral='aider --model mistral/mistral-large-latest'
alias aider-codestral='aider --model mistral/codestral-latest'

# Helper function to extract model size in billions
get_model_size() {
    local model_name="$1"
    local size
    # Extract number before 'b' or 'B', default to 0 if not found
    size=$(echo "$model_name" | grep -o '[0-9]\+\.*[0-9]*[bB]' | head -n1 | grep -o '[0-9]\+\.*[0-9]*' || echo "0")
    echo "$size"
}

aider-ollama() {
    local model
    model=$(ollama list | tail -n +2 | awk '{print $1}' | while read -r name; do
        size=$(get_model_size "$name")
        printf "%f %s\n" "$size" "$name"
    done | sort -nr | cut -d' ' -f2- | fzf --height 40% --reverse)
    if [ -n "$model" ]; then
        aider --model "ollama_chat/$model" "$@"
    else
        echo "No model selected"
    fi
}

aider-lmstudio() {
    local host
    local model
    local editor_model
    local args=("$@")
    local needs_editor_model=false
    
    # Check if --architect is in the arguments
    for arg in "${args[@]}"; do
        if [[ "$arg" == "--architect" ]]; then
            needs_editor_model=true
            break
        fi
    done
    
    # Choose host
    echo "Select host:"
    select host_option in "localhost" "daniels-mac.lan"; do
        case $host_option in
            localhost)
                host="localhost"
                break
                ;;
            daniels-mac.lan)
                host="daniels-mac.lan"
                break
                ;;
            *)
                echo "Invalid option"
                ;;
        esac
    done
    
    # Get models from selected host
    echo "Select main model:"
    model=$(curl -s "http://$host:1234/v1/models" | jq -r '.data[].id' | while read -r name; do
        size=$(get_model_size "$name")
        printf "%f %s\n" "$size" "$name"
    done | sort -nr | cut -d' ' -f2- | fzf --height 40% --reverse)
    
    # If --architect is used, also select an editor model
    if [[ "$needs_editor_model" == true ]]; then
        echo "Select editor model:"
        editor_model=$(curl -s "http://$host:1234/v1/models" | jq -r '.data[].id' | while read -r name; do
            size=$(get_model_size "$name")
            printf "%f %s\n" "$size" "$name"
        done | sort -nr | cut -d' ' -f2- | fzf --height 40% --reverse)
    fi
    
    if [ -n "$model" ]; then
        if [[ "$needs_editor_model" == true && -n "$editor_model" ]]; then
            LM_STUDIO_API_KEY="dummy-api-key" LM_STUDIO_API_BASE="http://$host:1234/v1" aider --model "lm_studio/$model" --editor-model "lm_studio/$editor_model" --no-show-model-warnings "$@"
        else
            LM_STUDIO_API_KEY="dummy-api-key" LM_STUDIO_API_BASE="http://$host:1234/v1" aider --model "lm_studio/$model" --no-show-model-warnings "$@"
        fi
    else
        echo "No model selected"
    fi
}
